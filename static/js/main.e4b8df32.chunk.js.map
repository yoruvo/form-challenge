{"version":3,"sources":["i18next.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["console","debug","strings","i18n","use","initReactI18next","init","resources","lng","interpolation","escapeValue","Header","Footer","Content","formLayout","labelCol","span","wrapperCol","style","display","gridTemplateColumns","buttonLayout","offset","App","useTranslation","t","className","theme","mode","Item","key","onClick","changeLanguage","initialValues","topic","onSubmit","values","f","notification","info","message","setSubmitting","props","flex","padding","name","label","Option","value","TextArea","size","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uuCAIAA,QAAQC,MAAMC,GAEdC,IAAKC,IAAIC,KAAkBC,KAAK,CAC9BC,UAAWL,EACXM,IAAK,KACLC,cAAe,CACbC,aAAa,KAIFP,EAAf,EAAeA,ICEPQ,E,IAAAA,OAAQC,E,IAAAA,OAAQC,E,IAAAA,QAElBC,EAAa,CACjBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,MAAO,CAAEC,QAAS,OAAQC,oBAAqB,YAG3CC,EAAe,CACnBJ,WAAY,CAAEK,OAAQ,EAAGN,KAAM,KAiGlBO,MA9Ff,WAAgB,IAAD,EACOC,cAAZC,EADK,EACLA,EAAGtB,EADE,EACFA,KACX,OACE,yBACE,gBAACQ,EAAD,KACE,uBAAKe,UAAU,SACf,qBAAMC,MAAM,OAAOC,KAAK,cACtB,oBAAMC,KAAN,CAAWC,IAAI,KAAKC,QAAS,kBAAM5B,EAAK6B,eAAe,QACpDP,EAAE,WAEL,oBAAMI,KAAN,CAAWC,IAAI,KAAKC,QAAS,kBAAM5B,EAAK6B,eAAe,QACpDP,EAAE,cAIT,gBAACZ,EAAD,KACE,uBAAKa,UAAU,cACb,gBAAC,IAAD,CACEO,cAAe,CAAEC,MAAO,SACxBC,SAAU,SAACC,EAAQC,GACjBC,EAAA,EAAaC,KAAK,CAAEC,QAASJ,EAAOF,QACpCG,EAAEI,eAAc,MAGjB,SAACC,GAAD,OACC,oBAAU5B,EACR,uBAAKI,MAAO,CAAEyB,KAAM,EAAGC,QAAS,KAC9B,oBAAMf,KAAN,CAAWgB,KAAK,OAAOC,MAAOrB,EAAE,qBAC9B,qBAAOoB,KAAK,UAGd,oBAAMhB,KAAN,CAAWgB,KAAK,QAAQC,MAAOrB,EAAE,sBAC/B,qBAAOoB,KAAK,WAGd,oBAAMhB,KAAN,CAAWgB,KAAK,QAAQC,MAAOrB,EAAE,sBAC/B,qBAAQoB,KAAK,SACX,oBAAQE,OAAR,CAAeC,MAAM,WAClBvB,EAAE,wBAEL,oBAAQsB,OAAR,CAAeC,MAAM,SAClBvB,EAAE,sBAEL,oBAAQsB,OAAR,CAAeC,MAAM,QAClBvB,EAAE,uBAMe,UAAvBiB,EAAMN,OAAOF,OACZ,oBAAML,KAAN,CAAWgB,KAAK,UAAUC,MAAOrB,EAAE,wBACjC,qBAAaoB,KAAK,aAGE,SAAvBH,EAAMN,OAAOF,OACZ,oBAAML,KAAN,CAAWgB,KAAK,QAAQC,MAAOrB,EAAE,sBAC/B,qBAAOoB,KAAK,WAIhB,oBAAMhB,KAAN,CACEgB,KAAK,cACLC,MAAOrB,EAAE,4BAET,oBAAOwB,SAAP,CAAgBJ,KAAK,iBAGvB,oBAAMhB,KAAN,eAAWgB,KAAK,UAAaxB,GAC3B,yBACE,qBAAc6B,KAAK,QAAQhC,MAAO,CAAEiC,UAAW,KAC5C1B,EAAE,uBAGL,qBAAayB,KAAK,QAAQhC,MAAO,CAAEiC,UAAW,KAC3C1B,EAAE,yBAMX,uBAAKP,MAAO,CAAEyB,KAAM,EAAGC,QAAS,KAC9B,iCAOZ,gBAAChC,EAAD,iBCzGcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAM5B,c","file":"static/js/main.e4b8df32.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\nimport strings from \"./strings.json\"\n\nconsole.debug(strings)\n\ni18n.use(initReactI18next).init({\n  resources: strings,\n  lng: \"de\",\n  interpolation: {\n    escapeValue: false, // apparently, React already performs XSS protection.\n  },\n})\n\nexport default i18n\n","import * as React from \"react\"\nimport \"./App.css\"\nimport { Formik } from \"formik\"\nimport {\n  ResetButton,\n  FormikDebug,\n  InputNumber,\n  Input,\n  SubmitButton,\n  Form,\n  Select,\n} from \"formik-antd\"\nimport { Space } from \"antd\"\nimport { useTranslation } from \"react-i18next\"\nimport \"./i18next\"\nimport { Layout, Menu, notification } from \"antd\"\nconst { Header, Footer, Content } = Layout\n\nconst formLayout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n  style: { display: \"grid\", gridTemplateColumns: \"1fr 1fr\" },\n}\n\nconst buttonLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n}\n\nfunction App() {\n  const { t, i18n } = useTranslation()\n  return (\n    <Layout>\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"de\" onClick={() => i18n.changeLanguage(\"de\")}>\n            {t(\"german\")}\n          </Menu.Item>\n          <Menu.Item key=\"en\" onClick={() => i18n.changeLanguage(\"en\")}>\n            {t(\"english\")}\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content>\n        <div className=\"my-content\">\n          <Formik\n            initialValues={{ topic: \"error\" }}\n            onSubmit={(values, f) => {\n              notification.info({ message: values.topic })\n              f.setSubmitting(false)\n            }}\n          >\n            {(props) => (\n              <Form {...formLayout}>\n                <div style={{ flex: 1, padding: 24 }}>\n                  <Form.Item name=\"name\" label={t(\"form.labels.name\")}>\n                    <Input name=\"name\" />\n                  </Form.Item>\n\n                  <Form.Item name=\"email\" label={t(\"form.labels.email\")}>\n                    <Input name=\"email\" />\n                  </Form.Item>\n\n                  <Form.Item name=\"topic\" label={t(\"form.labels.topic\")}>\n                    <Select name=\"topic\">\n                      <Select.Option value=\"general\">\n                        {t(\"form.values.general\")}\n                      </Select.Option>\n                      <Select.Option value=\"error\">\n                        {t(\"form.values.error\")}\n                      </Select.Option>\n                      <Select.Option value=\"call\">\n                        {t(\"form.values.call\")}\n                      </Select.Option>\n                    </Select>\n                  </Form.Item>\n\n                  {/* Conditional fields */}\n                  {props.values.topic === \"error\" && (\n                    <Form.Item name=\"version\" label={t(\"form.labels.version\")}>\n                      <InputNumber name=\"version\" />\n                    </Form.Item>\n                  )}\n                  {props.values.topic === \"call\" && (\n                    <Form.Item name=\"phone\" label={t(\"form.labels.phone\")}>\n                      <Input name=\"phone\" />\n                    </Form.Item>\n                  )}\n\n                  <Form.Item\n                    name=\"description\"\n                    label={t(\"form.labels.description\")}\n                  >\n                    <Input.TextArea name=\"description\" />\n                  </Form.Item>\n\n                  <Form.Item name=\"submit\" {...buttonLayout}>\n                    <Space>\n                      <SubmitButton size=\"large\" style={{ marginTop: 10 }}>\n                        {t(\"form.labels.submit\")}\n                      </SubmitButton>\n\n                      <ResetButton size=\"large\" style={{ marginTop: 10 }}>\n                        {t(\"form.labels.reset\")}\n                      </ResetButton>\n                    </Space>\n                  </Form.Item>\n                </div>\n\n                <div style={{ flex: 1, padding: 24 }}>\n                  <FormikDebug />\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </Content>\n      <Footer>Footer</Footer>\n    </Layout>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}