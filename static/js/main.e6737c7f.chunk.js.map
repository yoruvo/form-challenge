{"version":3,"sources":["i18next.ts","history.ts","FormItemWithTranslation.tsx","SupportForm.tsx","SupportFormResults.tsx","SupportFormContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["i18n","use","initReactI18next","init","resources","strings","lng","interpolation","escapeValue","createBrowserHistory","FormItem","name","showValidateSuccess","showInitialErrorAfterTouched","children","validate","restProps","t","useTranslation","form","errors","touched","initialErrors","error","getIn","undefined","initialError","isTouched","Array","isArray","reduce","acc","value","hasError","hasInitialError","isValid","showHelp","Item","validateStatus","hasFeedback","help","formLayout","labelCol","span","wrapperCol","style","display","gridTemplateColumns","buttonLayout","offset","phoneRegExp","versionRegExp","SupportForm","props","validationSchema","Yup","shape","required","email","topic","oneOf","version","when","is","then","matches","phone","description","min","initialValues","onSubmit","className","flex","label","Option","values","TextArea","size","marginTop","padding","JSON","stringify","Title","Paragraph","SupportFormResults","Object","keys","length","to","usableValues","dataSource","map","key","columns","title","dataIndex","level","pagination","type","SupportFormContainer","React","useState","setValues","path","v","history","push","Header","Footer","Content","App","minHeight","overflow","theme","mode","onClick","changeLanguage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e6737c7f.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\nimport strings from \"./strings.json\"\n\ni18n.use(initReactI18next).init({\n  resources: strings,\n  lng: \"de\",\n  interpolation: {\n    escapeValue: false, // apparently, React already performs XSS protection.\n  },\n})\n\nexport default i18n\n","import { createBrowserHistory } from \"history\"\n\nexport default createBrowserHistory()\n","/**\n * Custom Form.Item component override to allow translation.\n *\n * I did so to allow translation of the error messages with react-i18next.\n *\n * Ideally, the form component from formik-antd should allow supplying a\n * translation function for the error output.\n *\n * Issue opened here: https://github.com/jannikbuschke/formik-antd/issues/144\n *\n * NOTE: This is purely because of the Ant Design-based layer I used\n * for this project. It is not necessary to do so with pure Formik.\n * If your project uses Formik with another library, you can just\n * use the i18next t() function in your custom error output.\n */\n\nimport * as React from \"react\"\nimport { Field, FieldProps, getIn, FieldConfig } from \"formik\"\nimport { Form } from \"antd\"\nimport { FormItemProps as $FormItemProps } from \"antd/lib/form/FormItem\"\nimport { useTranslation } from \"react-i18next\"\nexport type FormItemProps = {\n  showValidateSuccess?: boolean\n  showInitialErrorAfterTouched?: boolean\n  children: React.ReactNode\n} & { name: string } & $FormItemProps &\n  Pick<FieldConfig, \"validate\">\n\nexport const FormItem = ({\n  name,\n  showValidateSuccess,\n  showInitialErrorAfterTouched = false,\n  children,\n  validate,\n  ...restProps\n}: FormItemProps) => {\n  const { t } = useTranslation()\n\n  return (\n    <Field name={name} validate={validate}>\n      {({\n        form: { errors = {}, touched = {}, initialErrors = {} },\n      }: FieldProps) => {\n        const error = getIn(errors, name, undefined)\n        const initialError = getIn(initialErrors, name, undefined)\n        let isTouched = getIn(touched, name, false) as boolean | boolean[]\n        if (Array.isArray(isTouched)) {\n          isTouched = isTouched.reduce((acc, value) => acc || value, false)\n        }\n        const hasError = error !== undefined && isTouched\n        const hasInitialError = initialError !== undefined\n        const isValid = !error && isTouched\n        const showHelp =\n          hasError ||\n          (hasInitialError && (!isTouched || showInitialErrorAfterTouched))\n\n        return (\n          <Form.Item\n            validateStatus={\n              hasError || (hasInitialError && !isTouched)\n                ? \"error\"\n                : isValid && showValidateSuccess\n                ? \"success\"\n                : undefined\n            }\n            hasFeedback={isValid}\n            help={\n              showHelp && (\n                <>\n                  {hasError && <li>{t(error)}</li>}\n                  {hasInitialError &&\n                    (!isTouched || showInitialErrorAfterTouched) && (\n                      <li>{t(initialError)}</li>\n                    )}\n                </>\n              )\n            }\n            {...restProps}\n          >\n            {children}\n          </Form.Item>\n        )\n      }}\n    </Field>\n  )\n}\n\nexport default FormItem\n","import * as React from \"react\"\nimport { Space } from \"antd\" // Ant Design styling components.\n\n// Formik wrappers for Ant Design form components.\nimport { Form, Input, ResetButton, Select, SubmitButton } from \"formik-antd\"\nimport { Field, Formik } from \"formik\" // Raw Formik components.\n\n// Custom formik-antd component override. See comment in the file for details.\nimport { FormItem } from \"./FormItemWithTranslation\"\n\nimport * as Yup from \"yup\" // Form validation.\nimport { useTranslation } from \"react-i18next\"\n\nimport SupportFormValues from \"./SupportFormValues\"\n\n// Ant Design layout setups for the form elements.\nconst formLayout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n  style: { display: \"grid\", gridTemplateColumns: \"1fr 1fr\" },\n}\nconst buttonLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n}\n// Pulled from: https://stackoverflow.com/questions/52483260/validate-phone-number-with-yup\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\n// Pulled from: https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst versionRegExp = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/\n\ninterface SupportFormProps {\n  initialValues: SupportFormValues\n  onSubmit: (values: SupportFormValues) => void\n}\n// Formik logic wrapper.\nconst SupportForm = (props: SupportFormProps) => {\n  const { t } = useTranslation()\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required(\"form.validation.required\"),\n    email: Yup.string()\n      .email(\"form.validation.emailInvalid\")\n      .required(\"form.validation.required\"),\n    // Topic validation: should be one of the possible values.\n    topic: Yup.string()\n      .required(\"form.validation.required\")\n      .oneOf([\"general\", \"error\", \"call\"], \"form.validation.topicInvalid\"),\n    // Version validation: Only when topic is \"Software error\".\n    // Should conform to Semantic Versioning.\n    version: Yup.string().when(\"topic\", {\n      is: (topic) => topic === \"error\",\n      then: Yup.string()\n        .required(\"form.validation.required\")\n        .matches(versionRegExp, \"form.validation.versionInvalid\"),\n    }),\n    // Phone validation: Only when topic is \"Return call\".\n    // Should be a phone number.\n    phone: Yup.string().when(\"topic\", {\n      is: (topic) => topic === \"call\",\n      then: Yup.string()\n        .required(\"form.validation.required\")\n        .matches(phoneRegExp, \"form.validation.phoneInvalid\"),\n    }),\n    // Description validation: Should be at least 10 characters.\n    description: Yup.string()\n      .required(\"form.validation.required\")\n      .min(10, \"form.validation.descriptionLength\"),\n  })\n\n  return (\n    <Formik\n      initialValues={props.initialValues}\n      validationSchema={validationSchema}\n      onSubmit={props.onSubmit}\n    >\n      {(props) => (\n        <Form {...formLayout}>\n          <div className=\"component\" style={{ flex: 1 }}>\n            <FormItem name=\"name\" required={true} label={t(\"form.labels.name\")}>\n              <Input name=\"name\" required={true} />\n            </FormItem>\n\n            <FormItem\n              name=\"email\"\n              required={true}\n              label={t(\"form.labels.email\")}\n            >\n              <Input name=\"email\" required={true} />\n            </FormItem>\n\n            <FormItem\n              name=\"topic\"\n              required={true}\n              label={t(\"form.labels.topic\")}\n            >\n              <Select name=\"topic\">\n                <Select.Option value=\"general\">\n                  {t(\"form.values.general\")}\n                </Select.Option>\n                <Select.Option value=\"error\">\n                  {t(\"form.values.error\")}\n                </Select.Option>\n                <Select.Option value=\"call\">\n                  {t(\"form.values.call\")}\n                </Select.Option>\n              </Select>\n            </FormItem>\n\n            {/* Conditional fields */}\n            {props.values.topic === \"error\" && (\n              <FormItem\n                name=\"version\"\n                required={true}\n                label={t(\"form.labels.version\")}\n              >\n                <Input name=\"version\" required={true} />\n              </FormItem>\n            )}\n            {props.values.topic === \"call\" && (\n              <FormItem\n                name=\"phone\"\n                required={true}\n                label={t(\"form.labels.phone\")}\n              >\n                <Input name=\"phone\" required={true} />\n              </FormItem>\n            )}\n\n            <FormItem\n              name=\"description\"\n              required={true}\n              label={t(\"form.labels.description\")}\n            >\n              <Input.TextArea name=\"description\" />\n            </FormItem>\n\n            <FormItem name=\"submit\" {...buttonLayout}>\n              <Space size=\"large\">\n                <SubmitButton size=\"large\" style={{ marginTop: 10 }}>\n                  {t(\"form.labels.submit\")}\n                </SubmitButton>\n\n                <ResetButton size=\"large\" style={{ marginTop: 10 }}>\n                  {t(\"form.labels.reset\")}\n                </ResetButton>\n              </Space>\n            </FormItem>\n          </div>\n\n          <div className=\"component\" style={{ flex: 1 }}>\n            {/* Copied from FormikDebug of formik-antd.\n                    The FormikDebug element only displays in dev mode.\n                    I want this to show on the GitHub Pages site.*/}\n            <pre style={{ padding: 15 }}>\n              <Field>{({ form }: any) => JSON.stringify(form, null, 2)}</Field>\n            </pre>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default SupportForm\n","import React from \"react\"\nimport { Button, Table, Typography } from \"antd\" // Ant Design styling\nimport { Link, Redirect } from \"react-router-dom\"\nimport SupportFormValues from \"./SupportFormValues\"\nimport { useTranslation } from \"react-i18next\"\n\nconst { Title, Paragraph } = Typography // Ant Design styling\n\ninterface SupportFormResultsProps {\n  values: SupportFormValues\n}\n\nconst SupportFormResults = (props: SupportFormResultsProps) => {\n  const { t } = useTranslation()\n\n  // If values invalid, return to form.\n  if (!props.values || Object.keys(props.values).length === 0) {\n    return <Redirect to=\"/form-challenge\" />\n  }\n\n  // Prepare values for output.\n  const values = props.values\n\n  if (props.values.topic !== \"error\") {\n    delete values.version\n  }\n  if (props.values.topic !== \"call\") {\n    delete values.phone\n  }\n\n  // At this point, we are confident that all values and all value keys are strings.\n  // Let's avoid iteration TypeScript errors with the following.\n  const usableValues = (values as unknown) as { [k: string]: string }\n\n  // Conversions for Ant Design table element.\n  const dataSource = Object.keys(values).map((key) => {\n    return {\n      key: t(`form.labels.${key}`),\n      value:\n        key === \"topic\"\n          ? t(`form.values.${usableValues[key]}`)\n          : usableValues[key],\n    }\n  })\n  const columns = [\n    {\n      title: t(\"results.key\"),\n      dataIndex: \"key\",\n      key: \"key\",\n    },\n    {\n      title: t(\"results.value\"),\n      dataIndex: \"value\",\n      key: \"value\",\n    },\n  ]\n\n  return (\n    <div className=\"component\">\n      <Typography>\n        <Title>{t(\"results.title\")}</Title>\n        <Paragraph>{t(\"results.thankYou\")}</Paragraph>\n        <Title level={3}>{t(\"results.submission\")}</Title>\n        <Table dataSource={dataSource} columns={columns} pagination={false} />\n      </Typography>\n      <Button type=\"primary\" style={{ marginTop: 24 }}>\n        <Link to=\"/form-challenge\">{t(\"results.return\")}</Link>\n      </Button>\n    </div>\n  )\n}\n\nexport default SupportFormResults\n","import React from \"react\"\nimport { Route, Switch } from \"react-router\"\nimport SupportForm from \"./SupportForm\"\nimport SupportFormResults from \"./SupportFormResults\"\nimport SupportFormValues from \"./SupportFormValues\"\nimport history from \"./history\"\n\n// The current version of the software we're supporting. Serves as placeholder.\nconst softwareVersion = \"1.10.0\"\n\nconst initialValues = {\n  name: \"\",\n  email: \"\",\n  topic: \"error\",\n  version: softwareVersion,\n  phone: \"\",\n  description: \"\",\n}\nconst SupportFormContainer = () => {\n  const [values, setValues] = React.useState<SupportFormValues>(initialValues)\n  return (\n    <Switch>\n      <Route path=\"/form-challenge/results\">\n        <SupportFormResults values={values} />\n      </Route>\n      <Route>\n        <SupportForm\n          initialValues={initialValues}\n          onSubmit={(v) => {\n            setValues(v)\n            history.push(\"/form-challenge/results\")\n          }}\n        />\n      </Route>\n    </Switch>\n  )\n}\n\nexport default SupportFormContainer\n","import * as React from \"react\"\nimport \"./App.css\"\nimport { useTranslation } from \"react-i18next\"\nimport \"./i18next\"\nimport { Layout, Menu } from \"antd\"\nimport history from \"./history\"\nimport { Router } from \"react-router\"\nimport SupportFormContainer from \"./SupportFormContainer\"\n\nconst { Header, Footer, Content } = Layout\n\nfunction App() {\n  const { t, i18n } = useTranslation()\n\n  return (\n    <Router history={history}>\n      <Layout style={{ minHeight: \"100vh\", overflow: \"auto\" }}>\n        <Header>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"horizontal\">\n            <Menu.Item key=\"de\" onClick={() => i18n.changeLanguage(\"de\")}>\n              {t(\"german\")}\n            </Menu.Item>\n            <Menu.Item key=\"en\" onClick={() => i18n.changeLanguage(\"en\")}>\n              {t(\"english\")}\n            </Menu.Item>\n          </Menu>\n        </Header>\n        <Content>\n          <div className=\"my-content\">\n            <SupportFormContainer />\n          </div>\n        </Content>\n        <Footer>Footer</Footer>\n      </Layout>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}