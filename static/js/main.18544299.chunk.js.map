{"version":3,"sources":["lib/i18next.ts","components/formik-antd/TranslatedFormItem.tsx","components/formik-antd/FormikDebugProduction.tsx","components/SupportForm.tsx","components/SupportFormResults.tsx","components/Content.tsx","components/App.tsx","index.tsx"],"names":["i18n","use","initReactI18next","init","resources","strings","lng","interpolation","escapeValue","FormItem","name","showValidateSuccess","showInitialErrorAfterTouched","children","validate","restProps","t","useTranslation","form","errors","touched","initialErrors","error","getIn","undefined","initialError","isTouched","Array","isArray","reduce","acc","value","hasError","hasInitialError","isValid","showHelp","Item","validateStatus","hasFeedback","help","FormikDebug","props","style","padding","JSON","stringify","formLayout","labelCol","span","wrapperCol","display","gridTemplateColumns","buttonLayout","marginTop","offset","initialFormValues","email","topic","version","phone","description","validationSchema","Yup","shape","required","oneOf","when","is","then","matches","min","SupportForm","initialValues","onSubmit","className","flex","label","Option","values","TextArea","size","Title","Paragraph","SupportFormResults","Object","keys","length","to","usableValues","dataSource","map","key","columns","title","dataIndex","level","pagination","type","Content","React","useState","setValues","history","useHistory","path","v","push","Header","Footer","App","basename","minHeight","overflow","theme","mode","defaultSelectedKeys","onClick","changeLanguage","Trans","i18nKey","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18544299.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\nimport strings from \"../strings.json\"\n\ni18n.use(initReactI18next).init({\n  resources: strings,\n  lng: \"de\",\n  interpolation: {\n    escapeValue: false, // apparently, React already performs XSS protection.\n  },\n})\n\nexport default i18n\n","/**\n * THIS IS TAKEN FROM formik-atnd LIBRARY\n * LINK: https://github.com/jannikbuschke/formik-antd/blob/master/src/form-item/index.tsx\n *\n * Issue opened here: https://github.com/jannikbuschke/formik-antd/issues/144\n *\n * I copied this to allow translation of the error messages with react-i18next.\n *\n * Ideally, the form component from formik-antd would allow supplying a\n * translation function for the error output. This isn't the case.\n *\n * NOTE: This is needed purely because of the Ant Design-based layer I used\n * for this project. It is not necessary to do so with pure Formik. If your\n * project uses Formik with another library, you can just use the i18next\n * t() function in your custom error output.\n */\n\nimport * as React from \"react\"\nimport { Field, FieldProps, getIn, FieldConfig } from \"formik\"\nimport { Form } from \"antd\"\nimport { FormItemProps as $FormItemProps } from \"antd/lib/form/FormItem\"\nimport { useTranslation } from \"react-i18next\"\nexport type FormItemProps = {\n  showValidateSuccess?: boolean\n  showInitialErrorAfterTouched?: boolean\n  children: React.ReactNode\n} & { name: string } & $FormItemProps &\n  Pick<FieldConfig, \"validate\">\n\nexport const FormItem = ({\n  name,\n  showValidateSuccess,\n  showInitialErrorAfterTouched = false,\n  children,\n  validate,\n  ...restProps\n}: FormItemProps) => {\n  const { t } = useTranslation()\n\n  return (\n    <Field name={name} validate={validate}>\n      {({\n        form: { errors = {}, touched = {}, initialErrors = {} },\n      }: FieldProps) => {\n        const error = getIn(errors, name, undefined)\n        const initialError = getIn(initialErrors, name, undefined)\n        let isTouched = getIn(touched, name, false) as boolean | boolean[]\n        if (Array.isArray(isTouched)) {\n          isTouched = isTouched.reduce((acc, value) => acc || value, false)\n        }\n        const hasError = error !== undefined && isTouched\n        const hasInitialError = initialError !== undefined\n        const isValid = !error && isTouched\n        const showHelp =\n          hasError ||\n          (hasInitialError && (!isTouched || showInitialErrorAfterTouched))\n\n        return (\n          <Form.Item\n            validateStatus={\n              hasError || (hasInitialError && !isTouched)\n                ? \"error\"\n                : isValid && showValidateSuccess\n                ? \"success\"\n                : undefined\n            }\n            hasFeedback={isValid}\n            help={\n              showHelp && (\n                <>\n                  {hasError && <li>{t(error)}</li>}\n                  {hasInitialError &&\n                    (!isTouched || showInitialErrorAfterTouched) && (\n                      <li>{t(initialError)}</li>\n                    )}\n                </>\n              )\n            }\n            {...restProps}\n          >\n            {children}\n          </Form.Item>\n        )\n      }}\n    </Field>\n  )\n}\n\nexport default FormItem\n","/**\n * THIS IS TAKEN FROM formik-antd LIBRARY\n * LINK: https://github.com/jannikbuschke/formik-antd/blob/master/src/formik-debug/index.tsx\n *\n * The FormikDebug element only displays in dev mode.\n * I want this to show on the GitHub Pages site.\n */\nimport { Field } from \"formik\"\nimport * as React from \"react\"\n\nexport const FormikDebug = (\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >,\n) => (\n  <pre style={{ padding: 15, ...props }}>\n    <Field>{({ form }: any) => JSON.stringify(form, null, 2)}</Field>\n  </pre>\n)\n\nexport default FormikDebug\n","import * as React from \"react\"\n\nimport { Formik } from \"formik\"\nimport * as Yup from \"yup\" // Form validation.\nimport { useTranslation } from \"react-i18next\"\n\n// Custom formik-antd component replacements. See comment in the file for details.\nimport FormItem from \"./formik-antd/TranslatedFormItem\"\nimport FormikDebug from \"./formik-antd/FormikDebugProduction\"\n\n// Formik wrappers for Ant Design form components.\nimport { Form, Input, ResetButton, Select, SubmitButton } from \"formik-antd\"\nimport { Space } from \"antd\"\n\n// Ant Design layout setups for the form elements.\nconst formLayout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n  style: { display: \"grid\", gridTemplateColumns: \"1fr 1fr\" },\n}\nconst buttonLayout = {\n  style: { marginTop: 10 },\n  wrapperCol: { offset: 8, span: 16 },\n}\n\n// The shape of the values used in the form.\nexport interface SupportFormValues {\n  name: string\n  email: string\n  topic: string\n  version?: string\n  phone?: string\n  description: string\n}\n\n// The current version of the software we're supporting. Serves as placeholder.\nconst softwareVersion = \"1.10.0\"\n\nexport const initialFormValues = {\n  name: \"\",\n  email: \"\",\n  topic: \"error\",\n  version: softwareVersion,\n  phone: \"\",\n  description: \"\",\n}\n\n// Pulled from: https://stackoverflow.com/questions/52483260/validate-phone-number-with-yup\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\n// Pulled from: https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst versionRegExp = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/\n\n// Yup validation schema for the form values.\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"form.validation.required\"),\n\n  email: Yup.string()\n    .email(\"form.validation.emailInvalid\")\n    .required(\"form.validation.required\"),\n\n  topic: Yup.string()\n    .required(\"form.validation.required\")\n    .oneOf([\"general\", \"error\", \"call\"], \"form.validation.topicInvalid\"),\n\n  version: Yup.string().when(\"topic\", {\n    is: (topic) => topic === \"error\",\n    then: Yup.string()\n      .required(\"form.validation.required\")\n      .matches(versionRegExp, \"form.validation.versionInvalid\"),\n  }),\n\n  phone: Yup.string().when(\"topic\", {\n    is: (topic) => topic === \"call\",\n    then: Yup.string()\n      .required(\"form.validation.required\")\n      .matches(phoneRegExp, \"form.validation.phoneInvalid\"),\n  }),\n\n  description: Yup.string()\n    .required(\"form.validation.required\")\n    .min(10, \"form.validation.descriptionLength\"),\n})\n\ninterface SupportFormProps {\n  initialValues: SupportFormValues\n  onSubmit: (values: SupportFormValues) => void\n}\n\nconst SupportForm = (props: SupportFormProps) => {\n  const { t } = useTranslation()\n\n  return (\n    <Formik\n      initialValues={props.initialValues}\n      validationSchema={validationSchema}\n      onSubmit={props.onSubmit}\n    >\n      {(props) => (\n        <Form {...formLayout}>\n          <div className=\"component\" style={{ flex: 1 }}>\n            <FormItem name=\"name\" required={true} label={t(\"form.labels.name\")}>\n              <Input name=\"name\" required={true} />\n            </FormItem>\n\n            <FormItem\n              name=\"email\"\n              required={true}\n              label={t(\"form.labels.email\")}\n            >\n              <Input name=\"email\" required={true} />\n            </FormItem>\n\n            <FormItem\n              name=\"topic\"\n              required={true}\n              label={t(\"form.labels.topic\")}\n            >\n              <Select name=\"topic\">\n                <Select.Option value=\"general\">\n                  {t(\"form.values.general\")}\n                </Select.Option>\n                <Select.Option value=\"error\">\n                  {t(\"form.values.error\")}\n                </Select.Option>\n                <Select.Option value=\"call\">\n                  {t(\"form.values.call\")}\n                </Select.Option>\n              </Select>\n            </FormItem>\n\n            {/* Conditional field: Version (if topic is \"Error\") */}\n            {props.values.topic === \"error\" && (\n              <FormItem\n                name=\"version\"\n                required={true}\n                label={t(\"form.labels.version\")}\n              >\n                <Input name=\"version\" required={true} />\n              </FormItem>\n            )}\n\n            {/* Conditional field: Phone (if topic is \"Call\") */}\n            {props.values.topic === \"call\" && (\n              <FormItem\n                name=\"phone\"\n                required={true}\n                label={t(\"form.labels.phone\")}\n              >\n                <Input name=\"phone\" required={true} />\n              </FormItem>\n            )}\n\n            <FormItem\n              name=\"description\"\n              required={true}\n              label={t(\"form.labels.description\")}\n            >\n              <Input.TextArea name=\"description\" />\n            </FormItem>\n\n            <FormItem name=\"submit\" {...buttonLayout}>\n              <Space size=\"large\">\n                <SubmitButton size=\"large\">\n                  {t(\"form.labels.submit\")}\n                </SubmitButton>\n\n                <ResetButton size=\"large\">{t(\"form.labels.reset\")}</ResetButton>\n              </Space>\n            </FormItem>\n          </div>\n\n          {/* Output the state of the form as debug information. */}\n          <div className=\"component\" style={{ flex: 1 }}>\n            <FormikDebug />\n          </div>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default SupportForm\n","import React from \"react\"\nimport { Button, Table, Typography } from \"antd\" // Ant Design styling\nimport { Link, Redirect } from \"react-router-dom\"\nimport { SupportFormValues } from \"./SupportForm\"\nimport { useTranslation } from \"react-i18next\"\n\nconst { Title, Paragraph } = Typography // Ant Design styling\n\ninterface SupportFormResultsProps {\n  values: SupportFormValues\n}\n\nconst SupportFormResults = (props: SupportFormResultsProps) => {\n  const { t } = useTranslation()\n\n  // If values invalid, return to form.\n  if (!props.values || Object.keys(props.values).length === 0) {\n    return <Redirect to=\"/form-challenge\" />\n  }\n\n  // Prepare values for output.\n  const values = props.values\n\n  if (props.values.topic !== \"error\") {\n    delete values.version\n  }\n  if (props.values.topic !== \"call\") {\n    delete values.phone\n  }\n\n  // At this point, we are confident that all values and all value keys are strings.\n  // Let's avoid iteration TypeScript errors with the following.\n  const usableValues = (values as unknown) as { [k: string]: string }\n\n  // Conversions for Ant Design table element.\n  const dataSource = Object.keys(values).map((key) => {\n    return {\n      key: t(`form.labels.${key}`),\n      value:\n        key === \"topic\"\n          ? t(`form.values.${usableValues[key]}`)\n          : usableValues[key],\n    }\n  })\n  const columns = [\n    {\n      title: t(\"results.key\"),\n      dataIndex: \"key\",\n      key: \"key\",\n    },\n    {\n      title: t(\"results.value\"),\n      dataIndex: \"value\",\n      key: \"value\",\n    },\n  ]\n\n  return (\n    <div className=\"component\">\n      <Typography>\n        <Title>{t(\"results.title\")}</Title>\n        <Paragraph>{t(\"results.thankYou\")}</Paragraph>\n        <Title level={3}>{t(\"results.submission\")}</Title>\n        <Table dataSource={dataSource} columns={columns} pagination={false} />\n      </Typography>\n      <Button type=\"primary\" style={{ marginTop: 24 }}>\n        <Link to=\"/form-challenge\">{t(\"results.return\")}</Link>\n      </Button>\n    </div>\n  )\n}\n\nexport default SupportFormResults\n","import React from \"react\"\nimport { Route, Switch, useHistory } from \"react-router\"\nimport SupportForm, { initialFormValues } from \"./SupportForm\"\nimport SupportFormResults from \"./SupportFormResults\"\nimport { SupportFormValues } from \"./SupportForm\"\nimport { Layout } from \"antd\"\n\nconst Content = () => {\n  const [values, setValues] = React.useState<SupportFormValues>(\n    initialFormValues,\n  )\n  const history = useHistory()\n\n  return (\n    <Layout.Content>\n      <Switch>\n        <Route path=\"/results\">\n          <SupportFormResults values={values} />\n        </Route>\n        <Route>\n          <SupportForm\n            initialValues={initialFormValues}\n            onSubmit={(v) => {\n              setValues(v)\n              history.push(\"/results\")\n            }}\n          />\n        </Route>\n      </Switch>\n    </Layout.Content>\n  )\n}\n\nexport default Content\n","import * as React from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport \"../lib/i18next\"\nimport { Layout, Menu } from \"antd\"\nimport Content from \"./Content\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nconst { Header, Footer } = Layout\n\nfunction App() {\n  const { t, i18n } = useTranslation()\n\n  return (\n    <Router basename=\"/form-challenge\">\n      <Layout style={{ minHeight: \"100vh\", overflow: \"auto\" }}>\n        <Header>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"de\"]}>\n            <Menu.Item key=\"de\" onClick={() => i18n.changeLanguage(\"de\")}>\n              {t(\"german\")}\n            </Menu.Item>\n            <Menu.Item key=\"en\" onClick={() => i18n.changeLanguage(\"en\")}>\n              {t(\"english\")}\n            </Menu.Item>\n          </Menu>\n        </Header>\n        <Content />\n        <Footer>\n          <Trans i18nKey=\"footer\">\n            Written by Ivan \"yoruvo\" Vidusenko. Find this project on{\" \"}\n            <a href=\"https://github.com/yoruvo/form-challenge\">GitHub</a>\n          </Trans>\n        </Footer>\n      </Layout>\n    </Router>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./assets/style.css\"\nimport App from \"./components/App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}